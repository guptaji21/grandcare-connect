// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  role          UserRole  @default(PARENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts               Account[]
  sessions               Session[]
  profile                Profile?
  children               Child[]
  caregiverCouple        CaregiverCouple?
  bookingsAsParent       Booking[]        @relation("ParentBookings")
  reviewsAsParent        Review[]         @relation("ParentReviews")
  messageThreadsAsParent MessageThread[]  @relation("ParentThreads")
  messages               Message[]
  notifications          Notification[]
  // REMOVE this line:
  // payouts       Payout[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  firstName String
  lastName  String
  phone     String?
  avatarUrl String?
  city      String
  state     String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Child {
  id        String   @id @default(cuid())
  parentId  String
  name      String
  birthdate DateTime
  allergies String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent   User           @relation(fields: [parentId], references: [id], onDelete: Cascade)
  bookings BookingChild[]
}

model CaregiverCouple {
  id               String           @id @default(cuid())
  userId           String           @unique
  partnerOneName   String
  partnerTwoName   String
  yearsExperience  Int
  bio              String
  hourlyRateCents  Int
  maxKids          Int
  languages        String[]
  address          String
  city             String
  state            String
  country          String
  zipCode          String
  phone            String
  isVerified       Boolean          @default(false)
  backgroundStatus BackgroundStatus @default(PENDING)
  references       String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  user           User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  availability   CaregiverAvailability[]
  listings       Listing[]
  bookings       Booking[]
  reviews        Review[]                @relation("CaregiverReviews")
  messageThreads MessageThread[]         @relation("CaregiverThreads")
  backgroundDocs BackgroundDocument[]
  payouts        Payout[]
}

model CaregiverAvailability {
  id          String   @id @default(cuid())
  caregiverId String
  weekday     Int // 0-6 (Sunday-Saturday)
  startTime   Int // minutes since midnight
  endTime     Int // minutes since midnight
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  caregiver CaregiverCouple @relation(fields: [caregiverId], references: [id], onDelete: Cascade)

  @@unique([caregiverId, weekday])
}

model Listing {
  id            String   @id @default(cuid())
  caregiverId   String
  title         String
  description   String
  coverImageUrl String?
  gallery       String[]
  isActive      Boolean  @default(true)
  avgRating     Float    @default(0)
  reviewCount   Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  caregiver      CaregiverCouple @relation(fields: [caregiverId], references: [id], onDelete: Cascade)
  bookings       Booking[]
  messageThreads MessageThread[]
  reviews        Review[]
}

model Booking {
  id          String        @id @default(cuid())
  parentId    String
  caregiverId String
  listingId   String?
  startAt     DateTime
  endAt       DateTime
  hours       Decimal       @db.Decimal(4, 2)
  priceCents  Int
  status      BookingStatus @default(REQUESTED)
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  parent    User            @relation("ParentBookings", fields: [parentId], references: [id], onDelete: Cascade)
  caregiver CaregiverCouple @relation(fields: [caregiverId], references: [id], onDelete: Cascade)
  listing   Listing?        @relation(fields: [listingId], references: [id], onDelete: Cascade)
  children  BookingChild[]
  payment   Payment?        @relation("BookingPayment")
  review    Review?         @relation("BookingReview")
  thread    MessageThread?  @relation("BookingToThread")

  @@index([parentId])
  @@index([caregiverId])
  @@index([listingId])
  @@index([startAt])
}

model BookingChild {
  id        String @id @default(cuid())
  bookingId String
  childId   String

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  child   Child   @relation(fields: [childId], references: [id], onDelete: Cascade)

  @@unique([bookingId, childId])
}

model Payment {
  id                    String        @id @default(cuid())
  bookingId             String        @unique // ← add @unique
  stripePaymentIntentId String        @unique
  amountCents           Int
  currency              String        @default("usd")
  status                PaymentStatus @default(REQUIRES_CAPTURE)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  booking Booking @relation("BookingPayment", fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([stripePaymentIntentId])
}

model Payout {
  id          String       @id @default(cuid())
  caregiverId String
  amountCents Int
  status      PayoutStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  caregiver CaregiverCouple @relation(fields: [caregiverId], references: [id], onDelete: Cascade)

  @@index([caregiverId])
}

model Review {
  id          String   @id @default(cuid())
  bookingId   String   @unique
  parentId    String
  caregiverId String
  listingId   String?
  rating      Int // 1-5
  text        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  booking   Booking         @relation("BookingReview", fields: [bookingId], references: [id], onDelete: Cascade)
  parent    User            @relation("ParentReviews", fields: [parentId], references: [id], onDelete: Cascade)
  caregiver CaregiverCouple @relation("CaregiverReviews", fields: [caregiverId], references: [id], onDelete: Cascade)
  listing   Listing?        @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([caregiverId])
  @@index([parentId])
  @@index([listingId])
}

model MessageThread {
  id            String    @id @default(cuid())
  parentId      String
  caregiverId   String
  listingId     String?
  bookingId     String?   @unique // ← add @unique
  lastMessageAt DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  parent    User            @relation("ParentThreads", fields: [parentId], references: [id], onDelete: Cascade)
  caregiver CaregiverCouple @relation("CaregiverThreads", fields: [caregiverId], references: [id], onDelete: Cascade)
  listing   Listing?        @relation(fields: [listingId], references: [id], onDelete: Cascade)
  messages  Message[]
  booking   Booking?        @relation("BookingToThread", fields: [bookingId], references: [id], onDelete: Cascade)

  @@unique([parentId, caregiverId, listingId])
  @@index([parentId])
  @@index([caregiverId])
  @@index([listingId])
  @@index([bookingId])
}

model Message {
  id        String   @id @default(cuid())
  threadId  String
  senderId  String
  body      String
  createdAt DateTime @default(now())

  thread MessageThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  sender User          @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([threadId])
  @@index([senderId])
}

model BackgroundDocument {
  id          String       @id @default(cuid())
  caregiverId String
  type        DocumentType
  fileUrl     String
  createdAt   DateTime     @default(now())

  caregiver CaregiverCouple @relation(fields: [caregiverId], references: [id], onDelete: Cascade)

  @@index([caregiverId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  payload   Json
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
}

enum UserRole {
  PARENT
  CAREGIVER
  ADMIN
}

enum BackgroundStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BookingStatus {
  REQUESTED
  ACCEPTED
  DECLINED
  CANCELLED
  COMPLETED
  DISPUTED
}

enum PaymentStatus {
  REQUIRES_CAPTURE
  CAPTURED
  VOIDED
  REFUNDED
}

enum PayoutStatus {
  PENDING
  PAID
  FAILED
}

enum DocumentType {
  ID_FRONT
  ID_BACK
  UTILITY_BILL
  BACKGROUND_CHECK
}
